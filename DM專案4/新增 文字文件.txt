SUPPORT與規則數量的關係:
隨著支持度的增加，關連規則數減少，這是因為
支持度的遞增會將低於此支持度的規則過濾，因此匹配到的規則會減少，
當confidence不改變，support提高時，規則數量將減少。
例如:將confidence固定在0.008，min_support從0.001提升至0.003時
規則也從216下降至72
例如:當支持度從0.001增加至0.003時，規則數量從216減少至72筆。

CONFIDENCE與規則數量的關係:
隨著置信度的增加，關聯規則的數量也隨之減少，較高的置信度將
過濾更多的規則數，當門檻提高時，符合條件的規則數量減少
當support不改變時，confidence提高時，規則數量將減少，
例如:將min_support固定在0.001時將confidence從0.008提高至0.011時，
規則也從216下降至197

執行時間的變化:
隨著support與confidence的增加，算法的執行時間會減少。
這是因為較高的support與confidence將會過濾掉多數的規則與頻繁集 
算法需要處理的數據量減少，從而加快執行速度，例如:
當支持度從0.001增加至0.003時，執行時間也從0.04減少至0.017

綜合:
較高的support和confidence可以得到更強烈關連規則，但規則數會減少，
較低的支持度可以得到更多的關連規則，但這些規則的強度會較弱


apriori比fp_growth還快?
通常fp_growth會比apriori在大規模數據上效能還好，
因為fp_growth只需要有兩次掃描，一次建構FP-tree，依次用於挖掘頻繁集
建構FP-tree時也減少了候選集，
相較之下apriori需要多次掃描

那麼多優點為何還比較慢?
Main reason: 
數據集較小，在數據集小的情況下建出fp-tree，在少量頻繁集的情況下不需要建構
這麼複雜的結構，在簡單數據集的情況下建立如此複查的樹將會花費相當多的時間，
也是這樣，在此數據集中，fp_growth會比apriori花費更多執行時間。